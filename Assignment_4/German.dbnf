-- utterances and sentences
Utt ::= Utt Punct        # head punct
Utt ::= Conj Utt         # cc head
Utt ::= NP_obl comma Utt # cc punct head
Utt ::= parenth Utt parenth # punct head punct

Utt ::= S
Utt ::= QS
Utt ::= Imp
Utt ::= NP
Utt ::= AP
Utt ::= IP
Utt ::= IAdv
Utt ::= Num

-- sentences
S ::= NP VP # nsubj head
S ::= NP neg VP  # nsubj advmod head
S ::= NP have VP  # nsubj aux head
S ::= NP aux neg? VP  # nsubj aux advmod head

S ::= NP cop AdV? Comp # nsubj cop advmod head
S ::= NP have neg? AdV? Comp # nsubj aux advmod advmod head
S ::= NP aux have? neg? cop Comp # nsubj aux aux advmod cop head

S ::= NP cop neg? AdV? VP_pass # nsubj:pass cop advmod advmod head
S ::= NP have neg? VP_pass # nsubj:pass aux advmod head
S ::= NP aux neg? VP_pass have? # nsubj:pass aux advmod head aux

S ::= there be_V  neg? AdV? NP # expl head advmod advmod nsubj
S ::= there be_V neg? AdV? NP have # expl head advmod advmod nsubj aux
S ::= there aux AdV? neg? have? be_V NP # expl aux advmod advmod aux head nsubj
S ::= it cop AdV? neg? AP # expl cop advmod advmod head

S ::= NP be_V SC # nsubj head ccomp
S ::= NP be_V neg? SC have # nsubj head advmod ccomp aux
S ::= NP aux SC be_V # nsubj aux ccomp head

S ::= SC VP # csubj head
S ::= SC do VP # csubj aux head
S ::= SC cop neg? VP_pass # csubj:pass aux:pass advmod head
S ::= SC have neg? VP_pass # csubj:pass aux advmod head
S ::= S_front be_V NP SC # parataxis head nsubj ccomp

QS ::= do NP neg? VP # aux nsubj advmod head
QS ::= aux NP neg?  VP # aux nsubj advmod head
QS ::= cop NP neg? Comp # cop nsubj advmod head
QS ::= cop NP Comp # cop nsubj head

QS ::= cop NP neg? VP_pass # aux:pass nsubj:pass advmod head
QS ::= have NP neg? VP_pass # aux nsubj:pass advmod head
QS ::= aux NP neg? VP_pass cop # aux nsubj:pass advmod head cop

QS ::= IP VP # nsubj head
QS ::= IP neg VP # nsubj advmod head
QS ::= IP have? neg? VP # nsubj aux advmod head
QS ::= IP cop neg? Comp # nsubj cop advmod head
QS ::= IP aux neg? Comp # nsubj aux advmod head
QS ::= IP NP neg? VPSlash # obj nsubj advmod head
QS ::= IP aux NP neg? VPSlash # obj aux nsubj advmod head

QS ::= IP cop neg? VP_pass # nsubj:pass aux:pass advmod head
QS ::= IP have neg? VP_pass # nsubj:pass aux advmod head
QS ::= IP aux neg? VP_pass have? # nsubj:pass aux aux:pass head aux

QS ::= IAdv NP neg? VP # advmod nsubj advmod head
QS ::= IAdv aux NP neg? VP have? # advmod aux nsubj advmod head aux 
QS ::= IAdv cop NP neg? Comp # advmod cop nsubj advmod head
QS ::= IAdv cop NP Comp # advmod cop nsubj head

QS ::= IAdv cop neg? VP_pass # advmod aux:pass advmod head

-- indirect questions
QS ::= if S # mark head
QS ::= IP does? NP neg? VPSlash # obj nsubj nsubj advmod head
QS ::= IP  have? NP neg? VPSlash # obj aux nsubj advmod head
QS ::= IAdv do? NP neg? VP # advmod aux nsubj advmod head
QS ::= IAdv aux NP neg? VP # advmod aux nsubj advmod head
QS ::= IAdv cop NP neg? Comp # advmod cop nsubj advmod head

RS ::= RP VP # nsubj head
RS ::= RP do neg VP # nsubj aux advmod head
RS ::= RP have neg? VP # nsubj aux advmod head
RS ::= RP cop neg? Comp # nsubj cop advmod head
RS ::= RP have neg? Comp cop # nsubj aux advmod head cop

RS ::= RP NP VPSlash # obj nsubj head
RS ::= RP NP neg VPSlash # obj nsubj advmod head
RS ::= NP VPSlash # nsubj head
RS ::= NP neg VPSlash # nsubj advmod head

-- imperatives
Imp ::= do? neg? VP # aux advmod head
Imp ::= do? neg? Comp # aux advmod head

-- sentences with adverbials
S  ::= S_subcomma S # advcl head
S  ::= S S_sub # head advcl
S  ::= Adv_comma S # advmod head
S  ::= NP_oblcomma S # nmod head

-- embedded sentences
SC ::= S_that
SC ::= QS
SC ::= VP_to


VP ::= V
VP ::= aux # # 0.001
VP ::= V2 NP  # head obj
VP ::= V2 NP_obl # head obl
VP ::= V3 NP NP # head iobj obj
VP ::= V2C NP NP # head obj xcomp
VP ::= V2C NP AP # head obj xcomp
VP ::= VS S_that # head ccomp
VP ::= VV VP_to # head xcomp
VP ::= V2V NP VP # head obj xcomp
VP ::= V2V NP VP_to # head obj xcomp
VP ::= VP comma? Adv # head punct advmod
VP ::= AdV VP # advmod head 
VP ::= VP NP_obl # head obl # 0.001
VP ::= VS S_direct # head parataxis

VP_pass ::= V2
VP_pass ::= VP_pass Adv # head advmod
VP_pass ::= VP_pass NP_obl # head nmod

VPSlash ::= V2
VPSlash ::= VPSlash NP_obl  # head obl # 0.001
VPSlash ::= VPSlash Adv # head advmod
VPSlash ::= VP Prep # head case # 0.001

S_that ::= that? S # mark head

S_direct ::= colon S # punct head
S_direct ::= colon quote S quote # punct punct head punct
S_front  ::= S comma # head punct
S_front  ::= quote S NP quote comma SC # punct head nsubj punct punct ccomp

Comp ::= AP
Comp ::= NP
Comp ::= Adv
Comp ::= NP_obl
Comp ::= Comp comma? NP_obl # head punct nmod
Comp ::= Comp comma? Adv # head punct advmod

-- VP with to
VP_to ::= neg? to VP # advmod mark head
VP_to ::= neg? to Comp # advmod mark head

-- oblique noun phrase
NP_obl ::= Prep NP # case head

-- noun phrases
NP ::= PN
NP ::= Pron
NP ::= Num # # 0.1
NP ::= Det # # 0.1

NP ::= Det? CN # det head
NP ::= NP comma? NP_obl # head punct nmod
NP ::= Predet NP # det:predet head
NP ::= NP_poss CN # nmod:poss head
NP ::= Num NP # nummod head
NP ::= N PN # head flat
NP ::= NP SC # head acl
NP ::= NP comma? S_sub # head punct acl
NP ::= NP comma? RS # head punct acl:relcl
NP ::= Symb Num # head nummod
NP ::= NP comma? VP_pass # head punct acl # 0.01

NP_poss ::= NP 's # head case
NP_poss ::= Pron_poss

-- some very special rules ---
NP        ::= Det CN_quoted # det head
CN_quoted ::= quote CN quote # punct head punct
NP        ::= NP NP_appos # head appos # 0.01
NP_appos  ::= Punct_appos NP # punct head

Num ::= Card
Num ::= Digits

CN ::= N
CN ::= AP CN # amod head
CN ::= CN comma? AP # head punct amod # 0.01

PN ::= PN_one PN # head flat

N ::= N_one N # compound head
N ::= PN CN # compound head

Card ::= Card_one Card # compound head

IP ::= IDet CN # det head

-- adjectival phrases
AP ::= A
AP ::= AdA AP     # advmod head
AP ::= AP NP_obl  # head nmod

-- adverbials
-- Adv ::= Prep NP # case head

S_sub       ::= comma? Subj S # punct mark head
S_subcomma  ::= Subj S comma? # mark head punct
Adv_comma   ::= Adv comma? # head punct
NP_oblcomma ::= NP_obl comma? # head punct
S_sub       ::= comma? Subj VP # punct mark head # 0.1
S_subcomma  ::= Subj VP comma? # mark head punct # 0.1

-- coordination
S       ::= Conj_pre? ListS S_conj # cc:preconj head conj
ListS   ::= S 
ListS   ::= ListS NP # head nsubj
S_conj  ::= comma? Conj S # punct cc head
S_comma ::= comma S # punct head

NP       ::= Conj_pre? ListNP NP_conj # cc:preconj head conj
ListNP   ::= NP
ListNP   ::= ListNP NP_comma # head conj
NP_conj  ::= comma? Conj NP # punct cc head
NP_comma ::= comma NP # punct head

AP       ::= Conj_pre? ListAP AP_conj # cc:preconj head conj
ListAP   ::= AP
ListAP   ::= ListAP AP_comma # head conj
AP_conj  ::= comma? Conj AP # punct cc head
AP_comma ::= comma AP # punct head

VP       ::= Conj_pre? ListVP VP_conj # cc:preconj head conj
ListVP   ::= VP
ListVP   ::= ListVP VP_comma # head conj
VP_conj  ::= comma? Conj VP # punct cc head
VP_comma ::= comma VP # punct head

-- in Adv conjunctions, we want to include NP_obl parts: all that matters for UD is the category of the first conjunct
Adv       ::= Conj_pre? ListAdv Adv_conj # cc:preconj head conj
ListAdv   ::= Adv
ListAdv   ::= ListAdv Adv_comma # head conj
Adv_conj  ::= comma? Conj Adv # punct cc head
Adv_conj  ::= comma? Conj NP_obl # punct cc head
Adv_comma ::= comma Adv # punct head
Adv_comma ::= comma NP_obl # punct head

NP_obl     ::= Conj_pre? ListNP_obl Adv_conj # cc:preconj head conj
ListNP_obl ::= NP_obl
ListNP_obl ::= ListNP_obl Adv_comma # head conj



-- POS tag configurations
#pos AUX cop do have aux
#pos VERB V V2 V3 VS VV V2V V2C be_V
#pos NOUN N N_one
#pos ADJ A
#pos PROPN PN PN_one
#pos ADV Adv IAdv AdA AdV Predet neg
#pos SCONJ Subj that if
#pos CCONJ Conj Conj_pre
#pos DET Det IDet
#pos PRON Pron IP RP Pron_poss there it
#pos PART to 's
#pos PUNCT Punct Punct_appos comma quote colon parenth
#pos NUM Card Digits Card_one
#pos ADP Prep
#pos SYM Symb

-- structural word lexicon: normal categories
#token Prep at from in of on to with than auf von in zu mit dann
#token IP who whom what wer was
#token IAdv when where why wann wo warum 
#token AdA very too genetically sehr zu genetisch
#token AdV definitely always never auf jeden Fall immer nie
#token Det a an the every some many noein der die das immer ein paar viele keine
#token Pron I me you he him she her it we us they them ich du er sie es wir ihr sie
#token Subj if when although because as wenn obwohl weil als
#token aux can could must will would shall should kann könnte müssen wollen würden sollen sind 
#token Punct . ! ?
#token Punct_appos , :
#token Conj and or nor und oder nicht
#token Conj_pre both either neither beide ein oder andere nichts
#token IDet which welches
#token Pron_poss my your his her its our their meins deins seins ihres unseres ihres
#token RP that who das wer
#token Card five fünf

-- structural word lexicon: syncategorematic words
#token cop am is are was were be been being sein bin bist war waren 
#token be_V is are was were be been being sind war waren 
#token do do does did machen macht machte 
#token have have has had haben hat hatte 
#token neg not n't nicht 
#token that that das 
#token to to zu 
#token it it es
#token if if whether wenn ob 
#token there there dort
#token comma ,
#token colon :
#token quote "
#token 's 's
#token parenth ( ) [ ]

-- content word lexicon
#token PN John Mary
#token V sleeps sleep slept walk walks walked sing sings sang sung move moves moved happen happens happened leave leaves left run runs ran schläft schlafe schlief gehen geht ging singen sint sang gesungen sich bewegen sich bewegt hatte sich bewegt passieren passiert passierte verlassen verlässt hat verlassen rennen rennt gerannt
#token V2 sees see saw seen love loves loved look looks give gives gave concern concerns concerned make makes made decide decided sehen sah gesehen lieben liebt geliebt schauen schaut geben giebt gegeben betreffen betrifft betraf machen machte gemacht entscheiden entschieden 
#token V2 know knows knew known wissen weiß wusste gewusst 
#token V3 give gives gave geben gibt gegeben
#token V2C call calls called consider considers considered anrufen ruft an rief an beachten beachtet beachtete
#token V2V see sees saw consider considers considered stop stops stopped sehen sah gesehen beachten beachtet beachtete stoppen stoppt gestoppt 
#token VS say says said believe believes sagen sagte gesagt glauben glaubte geglaubt 
#token VV want wants try tries wollen will probieren probiert 
#token A old good curious black best cold modified tired bad large larger alt gut neugierig schwarz am besten kalt modifiziert müde schlecht groß größer 
#token N love sleep loves sleeps man men woman women cat cats doctor beer world elephant room hint hints reason reasons loser losers movie life Liebe Schlaf liebt schläft Mann Männer Frau Frauen Katze Katzen Doktor Welt Elefant Raum Hinweis Hinweise Grund Gründe Verlierer Film Leben 
#token N house president moon Earth girl girls wine beer Haus Präsident Mond Erde Mädchen Wein Bier
#token Adv now today here before there yesterday tomorrow always jetzt heute hier bevor dort gestern morgen immer 
#token Predet probably only eher nicht 
#token Symb $





